# -*- coding: utf-8 -*-
"""
Created on Fri Jul 24 17:19:22 2015

@author: wolfensb
"""
import numpy as np
import pyproj
import pycosmo as pc
from Atm_refraction.atm_refraction import get_radar_refraction, get_GPM_refraction
from config import config
import interpolation_c
from beam_class import Beam
from utilities import sum_arr
from utilities import nansum_arr

def integrate_GH_pts(list_GH_pts):
    num_beams=len(list_GH_pts)
    
    list_variables=list_GH_pts[0].values.keys()
    
    integrated_variables={}
    for k in list_variables:
        integrated_variables[k]=[float('nan')]
        for i in list_GH_pts:
            integrated_variables[k]=nansum_arr(integrated_variables[k],i.values[k]*i.GH_weight)
    
    # Get index of central beam
    idx_0=int(num_beams/2)
    
    # Sum the mask of all beams to get overall mask
    mask=np.zeros(num_beams,) # This mask serves to tell if the measured point is ok, or below topo or above COSMO domain
    for i,p in enumerate(list_GH_pts):
        mask=sum_arr(mask,p.mask) # Get mask of every Beam
    mask/=float(num_beams) # Larger than 1 means that every Beam is below TOPO, smaller than 0 that at least one Beam is above COSMO domain
    mask[np.logical_and(mask>=0,mask<1)]=0

    heights_radar=list_GH_pts[idx_0].heights_profile
    distances_radar=list_GH_pts[idx_0].dist_profile
    lats=list_GH_pts[idx_0].lats_profile
    lons=list_GH_pts[idx_0].lons_profile

    integrated_beam=Beam(integrated_variables,mask,lats, lons, distances_radar, heights_radar)
    return integrated_beam

def get_profiles_GH(dic_variables, azimuth, elevation, radar_range=0,N=0, list_refraction=0):

    list_variables=dic_variables.values()
    keys=dic_variables.keys()
    
    # Get options
    bandwidth_3dB=config['radar_3dB_beamwidth']
    nh_GH=int(config['nh_GH'])
    nv_GH=int(config['nv_GH'])
   
    # Get GH points and weights
    
    sigma=bandwidth_3dB/np.sqrt(2*np.log(2))

    GH_pts_hor, GH_weights_hor=np.polynomial.hermite.hermgauss(nh_GH)
    GH_pts_hor=GH_pts_hor*np.sqrt(2)*sigma
   
    GH_pts_ver, GH_weights_ver=np.polynomial.hermite.hermgauss(nv_GH)
    GH_pts_ver=GH_pts_ver*np.sqrt(2)*sigma


    if list_refraction==0: # Calculate refraction for vertical GH points
        list_refraction=[]
        
        if config['radar_type'] == 'GPM':
            for pt in GH_pts_ver:
                S,H, E = get_GPM_refraction(pt+elevation)
                list_refraction.append((S,H,E))

        else:
            
            # create vector of bin positions
            bins_ranges=np.arange(config['radar_rres']/2,config['radar_range'],config['radar_rres'])
            # Get coordinates of virtual radar
            radar_pos=config['radar_coords']
            
            refraction_method=config['refraction_method']
        
            if refraction_method=='ODE_s':
                if N==0:
                    print "To use the ODE_s method, you must give the refractivity as input using the 'N' input (you can load the refractivity with the function get_variable(filename,'N'))"
                    print "Using 4/3 method instead..."
                    refraction_method='4/3'
            elif refraction_method=='ODE_f':
                if N==0:
                    print "To use the ODE_f method, you must give the refractivity as input using the 'N' input (you can load the 			refractivity with the function get_variable(filename,'N'))"
                    refraction_method='4/3'
            
            for pt in GH_pts_ver:
                S,H, E = get_radar_refraction(bins_ranges, pt+elevation, radar_pos, refraction_method, N)
                list_refraction.append((S,H,E))
                
    
    treshold=np.mean([(GH_weights_hor[0]*GH_weights_hor[int(nh_GH/2)])/(nv_GH*nh_GH), (GH_weights_ver[0]*GH_weights_ver[int(nv_GH/2)])/(nv_GH*nh_GH)])
    sum_weights_GH=np.pi
    
    list_GH_beams=[]
    treshold=np.mean([(GH_weights_hor[0]*GH_weights_hor[int(nh_GH/2)])/(nv_GH*nh_GH), (GH_weights_ver[0]*GH_weights_ver[int(nv_GH/2)])/(nv_GH*nh_GH)])
    sum_weights_GH=np.pi
    
    beam_broadening=nh_GH>1 and nv_GH>1 # Boolean for beam-broadening (if only one GH point : No beam-broadening)


    for i in range(nh_GH): 
        for j in range(nv_GH):
            prod_weights_GH=GH_weights_hor[i]*GH_weights_ver[j]
            if prod_weights_GH>treshold or not beam_broadening:
                
                # GH coordinates
                pt_GH=[GH_pts_hor[i]+azimuth,GH_pts_ver[j]+elevation]
                weight_GH=prod_weights_GH/sum_weights_GH
                # Interpolate beam
                lats,lons,b=get_radar_beam_trilin(list_variables, GH_pts_hor[i]+azimuth, list_refraction[j][0],list_refraction[j][1])
                # Create dictionary of beams
                dic_beams={}
                for k, bi in enumerate(b): # Loop on interpolated variables
                    if k == 0: # Do this only for the first variable (same mask for all variables)
                        mask_beam=np.zeros((len(bi)))
                        mask_beam[bi==-9999]=-1 # Means that the interpolated point is above COSMO domain
                        mask_beam[np.isnan(bi)]=1  # NaN means that the interpolated point is below COSMO terrain
                    bi[mask_beam!=0]=float('nan') # Assign NaN to all missing data
                    dic_beams[keys[k]]=bi # Create dictionary
                list_GH_beams.append(Beam(dic_beams, mask_beam, lats, lons, list_refraction[j][0],list_refraction[j][1],list_refraction[j][2],pt_GH, weight_GH))        
    return list_GH_beams
    
    
def get_radar_beam_trilin(list_vars, azimuth, distances_profile, heights_profile):
    # Get position of virtual radar from config
    radar_pos=config['radar_coords']

    # Initialize WGS84 geoid
    g = pyproj.Geod(ellps='WGS84')

    # Get radar bins coordinates
    lons_rad=[]
    lats_rad=[]
    # Using the distance on ground of every radar gate, we get its latlon coordinates
    for d in distances_profile:
        lon,lat,ang=g.fwd(radar_pos[1],radar_pos[0],azimuth,d) # Note that pyproj uses lon, lat whereas I used lat, lon
        lons_rad.append(lon)
        lats_rad.append(lat)

    # Convert to numpy array
    lons_rad=np.array(lons_rad)
    lats_rad=np.array(lats_rad)
    
    # Initialize interpolated beams
    all_beams=[]
    
    # Get model heights and COSMO proj from first variable    
    ###########################################################################
    model_heights=list_vars[0].attributes['z-levels']
    rad_interp_values=np.zeros(len(distances_profile),)*float('nan')
    
    # Get COSMO local coordinates info
    proj_COSMO=list_vars[0].attributes['proj_info']
    # Get lower left corner of COSMO domain in local coordinates
    llc_COSMO=(float(proj_COSMO['Lo1']), float(proj_COSMO['La1']))
    res_COSMO=list_vars[0].attributes['resolution']

    # Get resolution 
    # Transform radar WGS coordinates into local COSMO coordinates

    coords_rad_loc=pc.WGS_to_COSMO((lats_rad,lons_rad),[proj_COSMO['Latitude_of_southern_pole'],proj_COSMO['Longitude_of_southern_pole']])  
    llc_COSMO=np.asarray(llc_COSMO).astype('float32')
    

    # Now we interpolate all variables along beam using C-code file
    ###########################################################################
    for n,var in enumerate(list_vars):           

        model_data=var.data
        rad_interp_values=interpolation_c.get_all_radar_pts(len(distances_profile),coords_rad_loc,heights_profile,model_data,model_heights\
        , llc_COSMO,res_COSMO)
        all_beams.append(rad_interp_values[1][:])

    return lats_rad, lons_rad, all_beams


if __name__=='__main__':
#    import matplotlib.pyplot as plt
    import config
    config.init('./sample_option_files/options_ALBIS_radar.txt') # Initialize options with 'options_radop.txt'
    from config import config
#    from rad_wind import get_doppler_velocity
    file_h=pc.open_file('/ltedata/COSMO/case2014040802_PAYERNE_analysis_ONEMOM/lfsf00124000')

    dic_vars=pc.get_variables(file_h,['QR_v','QS_v','QG_v','U','V','W','T'],get_proj_info=True,shared_heights=True,assign_heights=True,c_file='/ltedata/COSMO/case2014040802_PAYERNE_analysis_ONEMOM/lfsf00000000c')
    list_GH_pts = get_profiles_GH(dic_vars,0, 3)
    import pickle
    pickle.dump(list_GH_pts,open('ex_bemas.txt','wb'))
#    results1=[]
#    results2=[]
#    list_GH_pts = get_profiles_GH(dic_vars,-90, 10)
#    for az in np.arange(0,1.5,1.5):
#        
#        list_GH_pts = get_profiles_GH(dic_vars,az, 10)
##        dop_vel, spectrum=get_doppler_velocity(list_GH_pts)
#        
#        results1.append(list_GH_pts[int(len(list_GH_pts)/2)].values['QR_v'])
#    a=np.asarray(results1)
#    plt.figure()
#
#    plt.imshow(a)
    
